\documentclass{hitec}

\usepackage{hyperref}
\usepackage[usenames,dvipsnames]{xcolor}

\definecolor{darkblue}{RGB}{0,33,71}

\newcommand{\classname}[1]{\textsc{#1}}
\newcommand{\methodname}[1]{\textcolor{darkblue}{#1}}
\newcommand{\classmethodname}[2]{\classname{#1}.\classname{#2}}
\newcommand{\state}[1]{\textsc{#1}}

\settextfraction{0.92}


\title{Computer Networks Practical Documentation}
\author{Jeffrey Klardie}
\company{VU University, Amsterdam}


% You should document
%features of your design as well as why you made the decision to design those features in the first
% place. Do not tell the story of how you built your system. Documentation is not a novel of what
% you did, it is an explanation of how the system works and why.


\begin{document}
\maketitle

\section{Architecture overview}
The main architecture for this TCP stack is implemented in the classes \classname{TCP}, \classname{SegmentHandler} and \classname{TimeoutHandler}. These classes handle all the events that can occur inside TCP.

\subsection{TCP}
This class contains the main methods for handling the TCP stack. It exposes one public constructor, which creates the required underlying IP stack. Also, it exposes three methods:

\begin{itemize}
 \item \textbf{public Socket socket()} creates a new \classname{TransmissionControlBlock} object, and returns a new client socket.
 \item \textbf{public Socket socket(int port)} creates a new \classname{TransmissionControlBlock} object, and returns a new server socket which will later use the given port to listen for incoming requests.
 \item \textbf{protected TransmissionControlBlock.State getState()} returns the current state the TCP stack is in. This method is only used for testing. 
\end{itemize}

The \classname{TCP} class also has two private methods for sending and receiving data:

\begin{itemize}
 \item \textbf{private int send(byte[] buf, int offset, int len)}: This method tries to send \emph{len} bytes from the given buffer \emph{buf}, starting at \emph{offset}. The number of bytes written and acknowledged is returned, or -1 in case of any error. The behavior follows the strict state machine as defined in RFC 793. The following can happen depending on the state the stack is in: 
 
  \begin{itemize}
    \item \state{established} or \state{close-wait}: the data is segmentized (to make sure the maximum packet size is not overridden, the segments are sent, and the variable SND.NXT (next sequence number to use) is incremented. Now the method blocks, until all data has been acknowledged. If all data has been acknowledged, the amount of written data is returned, and -1 otherwise.
    \item \state{closed}: error, because the connection does not exist.
    \item \state{syn-sent} or \state{syn-received}: error, because the connection is not established.
    \item \state{listen}: error, because switching from passive to active open is not supported.
    \item other states: error, because the connection is closing.
  \end{itemize}
  
  \item \textbf{private int receive(byte[] buf, int offset, int maxlen)}: This method tries to receive \emph{maxlen} bytes from the other and, and writes them into the given buffer \emph{buf}, starting at \emph{offset}. The number of bytes read is returned, or -1 in case of any error. Just like send(), this method follows the strict TCP state machine. The following can happen depending on the state the stack is in:
  
  \begin{itemize}
    \item \state{established}, \state{fin-wait-1} or \state{fin-wait-2}: If there is no data to process in the queue, block until there is data. When data is available, write this data to the given buffer, and return the number of bytes read.
    \item \state{close-wait}: The remote side has already sent a FIN message, so the other end is done sending. This means that either data that was still in a queue is returned, or an error is thrown.
    \item \state{closed}: error, because the connection does not exist.
    \item \state{listen}, \state{syn-sent} or \state{syn-received}: error, because the connection is not established. In a full TCP implementation the receive request would be queued until the connection is established. In the current version this is not implemented though.
    \item other states: error, because the connection is closing.
  \end{itemize}
 
\end{itemize}

\subsection{TCP.Socket}
This is a subclass of \classname{TCP}, and the only one that is exposed to the end user. It exposes a total of five methods used to open a connection, read or write data, and to close a connection.

\begin{itemize}
 \item \textbf{public boolean connect(IpAddress dst, int port)}: This method tries to create a connection by sending the initial synchronize packet in the three-way handshake. The method blocks until the connection is established. It returns true if the connection is established, or false if an error occurs. In detail, this method performs the following steps (if the state was closed):
 
  \begin{itemize}
    \item Store the foreign socket information in the \classname{TransmissionControlBlock} object.
    \item Initialize and starts the segment receiver. This is a thread that waits for incoming segments, and forwards them to the \classname{SegmentHandler} object.
    \item Generate the initial sequence number.
    \item Construct an SYN packet and send it to the foreign socket.
    \item Set the SND.NXT (next sequence number to use) and SND.UNA (last sequence number not acknowledged yet) variables.
    \item Enter the state \state{syn-sent}.
    \item Wait until the state changes to either \state{established} (successfully connected) or \state{closed} (error).
  \end{itemize}

   \item \textbf{public void accept()}: This method starts the segment receiver thread, and enters the \state{listen} state. After that, it simply blocks until the state changes to \state{established}. The \classname{SegmentHandler} that runs in a background thread will handle incoming SYN packets, and respond to them depending on the state the TCP stack is in at that moment. It will correctly perform the three-way handshake if the state is \state{listen}, and a SYN packet arrives.
   
   \item \textbf{public int read(byte[] buf, int offset, int maxlen)}: This method simply calls \classmethodname{TCP}{receive(buf, offset, maxlen)}.
   
   \item \textbf{public int write(byte[] buf, int offset, int len)}: This method simply calls \classmethodname{TCP}{send(buf, offset, len)}.
   
   \item \textbf{public boolean close()}: This method closes a connection and only returns true if the close succeeded. The execution is highly dependent on the current state the stack is in (remember that the \classname{SegmentHandler} runs in the background to receive packets. Therefore it is possible to wait until a certain state is entered):
   
  \begin{itemize}
    \item \state{closed}: Error, because there is no active connection. 
    \item \state{listen}: The state \state{closed} is entered and any outstanding receives are stopped.
    \item \state{syn-sent}: The state \state{closed} is entered. Any queued sends and receives should be stopped. This implementation currently only stops outstanding receives. 
    \item \state{syn-received}: If we did not send anything, and there is also no data in the transmission queue, send the FIN packet and enter the state \state{fin-wait-1}. Otherwise, wait until the connection state becomes \state{established}, and execute the close() call again.
    \item \state{established}: Enter the state \state{fin-wait-1}, wait until all data that has been sent is acknowledged, and send the FIN packet. Then wait until the connection state becomes \state{closed}.
    \item \state{close-wait}: Wait until all data that has been sent is acknowledged , send the FIN packet and enter the state \state{last-ack}. Then wait until the connection state becomes \state{closed}.
    \item any other state: True is returned immediately, as the connection is already closing.
    
  \end{itemize}
   
\end{itemize}

\subsection{SegmentHandler}
The \classname{SegmentHandler} class is called by the \classname{SegmentReceiver} class. The latter runs in the background, and blocks until a new IP packet arrives. The data part of the IP packet is decoded, and the resulting segment is passed to the segment handler. It is started when a connection is opened (either \methodname{connect()} or \methodname{listen()} inside \classname{Socket} are called). 

The \classname{SegmentHandler} responds to all incoming packets according to the current state the TCP stack is in. When a new segment arrives, first of all the expected checksum is calculated. If the received checksum is not matching the expected checksum, the packet is dropped. If the checksum is valid, the following happens based on the state:

\begin{itemize}
  \item \state{closed}: The packet is dropped, because the connection is closed.
  
  \item \state{listen}: A SYN packet is expected, and if the packet contains any other control bit, the packet is dropped. When the packet is valid, the foreign socket info is stored, the variables RCV.NXT (next expected sequence number) and IRS (initial receive sequence number) are all set in the \classname{TransmissionControlBlock} object. Next, a SYN,ACK packet is sent in reply, the variables SND.NXT (next sequence number to send) and SND.UNA (last unacknowledged sequence number) are set, and the \state{syn-received} state is entered.
  
  \item \state{syn-sent}: The initial SYN packet is sent, so a matching SYN,ACK packet is expected. The incoming packet is dropped if it does not contain the SYN and ACK control bits, and also if the ACK number is incorrect. If this is all correct, the variables RCV.NXT and IRS are set. Also, the SND.UNA is updated (because we received a new ACK), and all packets that are hereby acknowledged are removed from the transmission queue. If this ACK actually acknowledges our SYN packet, then the \state{established} state is entered and an ACK is sent in reply. Note that we do drop any data that was send along the SYN,ACK message.
  
  \item any other state: first the sequence number of the packet is checked. A valid sequence number falls within the window of expected packets (greater than the previous sequence number, and smaller than the maximum packet size). Packets with invalid sequence numbers are dropped. After that, the following happens: 
  
  \begin{itemize}
    \item If the packet contains the SYN control bit, it is dropped, because this is considered an error (we already synchronized sequence numbers before). 
    \item If the packet does not contain an ACK number, it is dropped. Besides the initial SYN packet, all packets require an ACK value. Otherwise, based on the state:
    
    \begin{itemize}
      \item \state{syn-sent}: If this ACK acknowledges our SYN, we enter state \state{established}. 
      \item \state{last-ack}: Only thing that can arrive here is an acknowledgement to the sent FIN, so state \state{closed} is entered.
      \item \state{time-wait}: Only thing that can arrive here is a retransmission of the sent FIN. Here we restart the time-wait timer.
      \item any other state: if the ACK is inside the expected window, the SND.UNA value is updated, and any packets that are now acknowledged are removed from the retransmission queue. Duplicate ACKs are ignored. If the state is \state{fin-wait-1} and our FIN is acked, we enter state \state{fin-wait-2}. If the state is \state{fin-wait-2}
    \end{itemize}
    
    \item 
    
  \end{itemize}
  
\end{itemize}





\subsection{TimeoutHandler}
The \classname{TimeoutHandler} class handles all timeouts that can occur inside the system. These timeouts can either be a user timeout, a retransmission timeout, of a time-wait timeout, handled in \methodname{onUserTimeout()}, \methodname{onRetransmissionTimeout()} and \methodname{onTimeWaitTimeout()} respectively.

\begin{itemize}
 \item \textbf{onUserTimeout()} is called if a packet is not acknowledged within a specific timeframe. In that situation all queues are flushed, the user gets an error for any outstanding calls, and the \state{closed} state is entered. Note that currently this method is not implemented.
 
 \item \textbf{onRetransmissionTimeout()} is called if the retransmission timeout of a segment in the retransmission queue expires. When that happens, this method checks that the maximum number of retransmits (10 in this implementation) have not been exceeded. If not, the segment is sent again, and its retransmission timer is restarted. Note that when a segment does receive an acknowledgement, the entry is removed from the retransmission queue. If the maximum number of retransmits is reached, three things can happen:
 
  \begin{itemize}
    \item State is \state{syn-sent}: Three-way handshake was not completed, so move to \state{closed} again.
    \item State is \state{syn-received}: Three-way handshake was not completed, so move to \state{listen} again.
    \item Otherwise: state remains the same, packet is dropped.
  \end{itemize}
 
\item \textbf{onTimeWaitTimeout()} is called when the time-wait timeout expires. The time-wait timer is started when the TCP stack enters the \state{TIME-WAIT} state. This method sets the state to \state{closed}.

\end{itemize}


\end{document}
